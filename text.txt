package factory;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

import java.awt.*;
import java.awt.event.*;

public class SignUp {
    JPanel top, middle, bottom, submitPanel, borderPanel;
    JFrame frame;
    JTextField first_name, last_name, email, phone, password, confirm_password;
    JTextField street_num, street_name, city, parish_state, zip_code, country;
    JTextField[] textFields = new JTextField[11];
    String[] name_labels = { "First Name", "Last Name", "Email", "Phone", "Password", "Confirm Password" };
    String[] address_labels = { "Street Name", "Street Number", "City", "Parish\\State", "Country" };
    JButton submit;
    Border border = new LineBorder(new Color(0, 0, 0, 50), 1);
    Font font = new Font("Brush Script MT", Font.PLAIN, 17);

    public SignUp() {
        createFrame();
    }

    private void createFrame() {
        frame = new JFrame("Sign Up Form");
        frame.setSize(800, 900);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLayout(null);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        createTextFields();
        frame.setVisible(true);
    }

    private void createTextFields() {

        borderPanel = new JPanel(new BorderLayout());
        ((BorderLayout) borderPanel.getLayout()).setVgap(30);
        borderPanel.setBounds(95, 20, 600, 870);

        /* configure and Add the top panel to the frame */
        top = new JPanel(new GridLayout(1, 2));

        // Panel for "First Name"
        JPanel first = new JPanel(new GridLayout(2, 1));
        JLabel l1 = new JLabel(name_labels[0]);
        l1.setHorizontalAlignment(JTextField.CENTER);
        l1.setFont(font);
        first_name = new JTextField();
        first_name.setPreferredSize(new Dimension(100, 60));
        first.add(l1);
        first.add(first_name);

        // Panel for "Last Name"
        JPanel last = new JPanel(new GridLayout(2, 1));
        JLabel l2 = new JLabel(name_labels[1]);
        l2.setHorizontalAlignment(JTextField.CENTER);
        last_name = new JTextField();
        last_name.setPreferredSize(new Dimension(100, 60));
        last.add(l2);
        last.add(last_name);
        ((GridLayout) top.getLayout()).setHgap(60);
        ((GridLayout) top.getLayout()).setVgap(0);
        top.add(first);
        top.add(last);

        JLabel address_label = new JLabel("Address");
        address_label.setHorizontalAlignment(JLabel.CENTER);

        /* Configure and add the middle panel to the frame */
        middle = new JPanel(new GridLayout(3, 2)); // Adjusted grid dimension

        JPanel third = new JPanel(new GridLayout(2, 1));
        JLabel l3 = new JLabel("Street Name");
        ((GridLayout) third.getLayout()).setVgap(-30);
        l3.setHorizontalAlignment(JLabel.CENTER);
        street_name = new JTextField();
        street_name.setPreferredSize(new Dimension(50, 80));
        third.add(l3);
        third.add(street_name);

        JPanel fourth = new JPanel(new GridLayout(2, 1));
        JLabel l4 = new JLabel("Street Number");
        ((GridLayout) fourth.getLayout()).setVgap(-30);
        l4.setHorizontalAlignment(JLabel.CENTER);
        street_num = new JTextField();
        street_num.setPreferredSize(new Dimension(50, 10));
        fourth.add(l4);
        fourth.add(street_num);

        middle.add(third);
        middle.add(fourth);

        JPanel fifth = new JPanel(new GridLayout(2, 1));
        JLabel l5 = new JLabel("City");
        ((GridLayout) fifth.getLayout()).setVgap(-30);
        l5.setHorizontalAlignment(JLabel.CENTER);
        city = new JTextField();
        city.setPreferredSize(new Dimension(50, 10));
        fifth.add(l5);
        fifth.add(city);

        JPanel sixth = new JPanel(new GridLayout(2, 1));
        JLabel l6 = new JLabel("Parish State");
        ((GridLayout) sixth.getLayout()).setVgap(-30);
        l6.setHorizontalAlignment(JLabel.CENTER);
        parish_state = new JTextField();
        parish_state.setPreferredSize(new Dimension(50, 10));
        sixth.add(l6);
        sixth.add(parish_state);

        middle.add(fifth);
        middle.add(sixth);
        middle.setBorder(border);

        JPanel seventh = new JPanel(new GridLayout(2, 1));
        JLabel l7 = new JLabel("Zip Code");
        ((GridLayout) seventh.getLayout()).setVgap(-30);
        l7.setHorizontalAlignment(JLabel.CENTER);
        zip_code = new JTextField();
        zip_code.setPreferredSize(new Dimension(50, 10));
        seventh.add(l7);
        seventh.add(zip_code);

        JPanel eigth = new JPanel(new GridLayout(2, 1));
        JLabel l8 = new JLabel("Country");
        ((GridLayout) eigth.getLayout()).setVgap(-30);
        l8.setHorizontalAlignment(JLabel.CENTER);
        country = new JTextField();
        country.setPreferredSize(new Dimension(50, 10));
        eigth.add(l8);
        eigth.add(country);

        middle.add(seventh);
        middle.add(eigth);
        ((GridLayout) middle.getLayout()).setHgap(20);

        JPanel centralPanel = new JPanel(new BorderLayout());
        centralPanel.add(top, BorderLayout.NORTH);
        centralPanel.add(address_label, BorderLayout.CENTER);
        centralPanel.add(middle, BorderLayout.SOUTH);
        ((BorderLayout) centralPanel.getLayout()).setVgap(20);
        borderPanel.add(centralPanel, BorderLayout.NORTH);

        /* Configure and add the bottom panel to the frame */
        bottom = new JPanel(new GridLayout(2, 2));
        // Email and Phone in one row

        JPanel nineth = new JPanel(new GridLayout(2, 1));
        JLabel l9 = new JLabel("Email");
        ((GridLayout) nineth.getLayout()).setVgap(-30);
        l9.setHorizontalAlignment(JLabel.CENTER);
        email = new JTextField();
        email.setPreferredSize(new Dimension(50, 10));
        nineth.add(l9);
        nineth.add(email);

        JPanel tenth = new JPanel(new GridLayout(2, 1));
        JLabel l10 = new JLabel("Phone");
        ((GridLayout) tenth.getLayout()).setVgap(-30);
        l10.setHorizontalAlignment(JLabel.CENTER);
        phone = new JTextField();
        phone.setPreferredSize(new Dimension(50, 10));
        tenth.add(l10);
        tenth.add(phone);

        JPanel eleventh = new JPanel(new GridLayout(2, 1));
        JLabel l11 = new JLabel("Password");
        ((GridLayout) eleventh.getLayout()).setVgap(-30);
        l11.setHorizontalAlignment(JLabel.CENTER);
        password = new JTextField();
        password.setPreferredSize(new Dimension(50, 10));
        eleventh.add(l11);
        eleventh.add(password);

        bottom.add(nineth);
        bottom.add(tenth);

        JPanel twelveth = new JPanel(new GridLayout(2, 1));
        JLabel l12 = new JLabel("Confirm Password");
        ((GridLayout) twelveth.getLayout()).setVgap(-30);
        l12.setHorizontalAlignment(JLabel.CENTER);
        confirm_password = new JTextField();
        confirm_password.setPreferredSize(new Dimension(50, 100));
        twelveth.add(l12);
        twelveth.add(confirm_password);

        bottom.add(eleventh);
        bottom.add(twelveth);
        bottom.setBorder(border);

        submitPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        submit = new JButton("Sign Up");
        submit.setPreferredSize(new Dimension(100, 50));
        submitPanel.add(submit);

        borderPanel.add(bottom, BorderLayout.CENTER);
        borderPanel.add(submitPanel, BorderLayout.SOUTH);
        frame.add(borderPanel);
    }

    public static void main(String[] args) {
        new SignUp();
    }
}









package factory;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

import java.awt.*;
import java.awt.event.*;

public class SignUp {
    JFrame frame;
    JPanel top, middle, bottom, submitPanel, borderPanel;
    JTextField[] textFields = new JTextField[12];

    String[] n_label = {
            "First Name", "Last Name", "Email",
            "Phone", "Password", "Confirm Password",
    };
    String[] a_label = {
            "Street Name", "Street Number", "City",
            "Parish\\State", "Zip Code", "Country",
    };

    JButton submit;
    Border border = new LineBorder(new Color(0, 0, 0, 50), 1);
    Font font = new Font("Brush Script MT", Font.PLAIN, 17);

    public SignUp() {
        createFrame();
    }

    private void createInnerPanels() {
        JPanel top, middle, bottom, outerPanel, centralPanel, submitPanel;
        for (int i = 0; i < 2; i++) {
            top = new JPanel(new GridLayout(1, 2));
            top.add(createInsideTextFieldPanel(i));
        }

        for (int i = 2; i < 8; i++) {
            middle = new JPanel(new GridLayout(3, 2));
            middle.add(createInsideTextFieldPanel(i));
        }

        for (int i = 8; i < 12; i++) {
            bottom = new JPanel(new GridLayout(2, 2));
            
        }
    }

    private JPanel createInsideTextFieldPanel(int i) {

        JPanel panel = new JPanel(new GridLayout(2, 1));
        JLabel label = new JLabel((i < 6) ? n_label[i] : a_label[i]);
        textFields[i] = new JTextField();
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font);
        panel.add(label);
        panel.add(textFields[i]);
        if (i > 2) {
            textFields[i].setPreferredSize(new Dimension(100, 60));
            ((GridLayout) panel.getLayout()).setVgap(-30);
        } else
            textFields[i].setPreferredSize(new Dimension(50, 80));

        return panel;

    }

    private void createFrame() {
        frame = new JFrame("Sign Up Form");
        frame.setSize(800, 900);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLayout(null);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        // createTextFields();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        new SignUp();
    }
}








package factory;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

/**
 * Hello world!
 *
 */
public class App {
    private static Socket socket;
    private static ObjectInputStream inFromServer = null;
    private static ObjectOutputStream outToServer = null;
    private static boolean isEmp = false;

    public static void connect(String host, int port) {
        try {
            App.socket = new Socket(host, port);
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void configureStreams() {
        try {
            App.inFromServer = new ObjectInputStream(socket.getInputStream());
            App.outToServer = new ObjectOutputStream(socket.getOutputStream());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    public static void displayPerson(Person p) {
        if (App.isEmp) {
            Employee employee = (Employee) p;
            System.out.println(employee);
        } else {
            Customer customer = (Customer) p;
            System.out.println(customer);
        }
        // configureStreams();
        // try {
        // outToServer.writeObject("sign up");
        // String serverSays = (String) inFromServer.readObject();
        // if (serverSays.equalsIgnoreCase("employee or customer")) {
        // if (signUp.isCustomer) {
        // outToServer.writeObject("customer");
        // outToServer.flush();
        // outToServer.writeObject((Customer) signUp.getEntity());
        // } else if (!signUp.isCustomer) {
        // outToServer.writeObject("employee");
        // outToServer.flush();
        // outToServer.writeObject((Employee) signUp.getEntity());
        // }
        // serverSays = (String) inFromServer.readObject();
        // if (serverSays.equalsIgnoreCase("recieved")) {
        // }

        // }
        // } catch (ClassNotFoundException | IOException e) {
        // System.out.println(e.getMessage());
        // }

    }

    public static void engage() {
        new SignUp();
    }

    public static void main(String[] args) {
        String host = "127.0.0.1";
        int port = 8000;
        App.connect(host, port);
        App.engage();
    }

}







package factory;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

import common.Person;

public class App {
    private static Socket socket;
    private static ObjectInputStream inFromServer = null;
    private static ObjectOutputStream outToServer = null;
    private static boolean isEmp = false;

    public static void connect(String host, int port) {
        try {
            App.socket = new Socket(host, port);
            configureStreams();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void configureStreams() {
        try {
            App.outToServer = new ObjectOutputStream(App.socket.getOutputStream());
            App.outToServer.flush(); // Ensure data is sent immediately
            App.inFromServer = new ObjectInputStream(App.socket.getInputStream());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    public static String signUpMessage(String name, int id) {
        return "Congratulations " + name + "! You've been successfully signed up." +
                "\n\nYour Identification Number: [ " + id + " ]\n\nWhen logging in," +
                " use this number along with the password you used during" +
                " signup.\n\n Welcome to our system! Thank you for joining.";
    }

    public static int signUpEntity(Person p) {
        System.out.println("Signing up entity");
        try {
            App.outToServer.writeObject("sign up");
            App.outToServer.flush();

            try {
                String serverSays = (String) inFromServer.readObject();
                System.out.println("Server says: " + serverSays);

                if (serverSays.equalsIgnoreCase("employee or customer")) {
                    String msg = (App.isEmp) ? "employee" : "customer";
                    outToServer.writeObject(msg);
                    outToServer.flush();

                    if (msg.equalsIgnoreCase("customer")) {

                        outToServer.writeObject(p);
                        outToServer.flush();
                    }

                    if (msg.equalsIgnoreCase("employee")) {

                        outToServer.writeObject(p);
                        outToServer.flush();
                    }

                    int id = (Integer) inFromServer.readObject();
                    return id;
                }
            } catch (ClassNotFoundException e) {
                System.out.println(e.getMessage());
            }

        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
        return 0;
    }

    public static void initiate() {
        System.out.println(App.socket.getLocalPort());
        new SignUp();
    }

    public static void main(String[] args) {
        String host = "127.0.0.1";
        int port = 8000;
        App.connect(host, port);
        App.initiate();
    }
}

// package factory;

// import java.io.IOException;
// import java.io.ObjectInputStream;
// import java.io.ObjectOutputStream;
// import java.net.Socket;

// /**
// * Hello world!
// *
// */
// public class App {
// private static Socket socket;
// private static ObjectInputStream inFromServer = null;
// private static ObjectOutputStream outToServer = null;
// private static boolean isEmp = false;

// public static void connect(String host, int port) {
// try {
// App.socket = new Socket(host, port);
// } catch (IOException e) {
// System.out.println(e.getMessage());
// }
// }

// private static void configureStreams() {
// try {

// App.inFromServer = new ObjectInputStream(App.socket.getInputStream());
// App.outToServer = new ObjectOutputStream(App.socket.getOutputStream());
// App.outToServer.flush(); // Ensure data is sent immediately

// // }
// // System.out.println("Socket: " + App.socket.isConnected());
// // System.out.println("Before: " + App.inFromServer);
// // System.out.println("Before: " + App.outToServer);
// // App.inFromServer = new ObjectInputStream(App.socket.getInputStream());
// // App.outToServer = new ObjectOutputStream(App.socket.getOutputStream());
// // System.out.println("After: " + App.inFromServer);
// // System.out.println("After: " + App.outToServer);
// } catch (IOException e) {
// System.out.println(e.getMessage());
// } finally {
// try {
// if (App.outToServer != null) {
// App.outToServer.close();
// }
// if (App.inFromServer != null) {
// App.inFromServer.close();
// }
// } catch (IOException e) {
// System.out.println("Error closing streams: " + e.getMessage());
// }
// }
// }

// public static void signUpEntity(Person p) {
// System.out.println("Signing up entity");
// App.configureStreams();
// System.out.println("Finish configuring Streams");
// System.out.println("Socket Status: " + App.socket.isConnected());
// try {
// System.out.println("Inside Try Block");
// System.out.println(App.outToServer);
// App.outToServer.writeObject("sign up");
// String serverSays = (String) inFromServer.readObject();
// System.out.println("Server says: " + serverSays);
// if (serverSays.equalsIgnoreCase("employee or customer")) {
// if (App.isEmp) {
// App.outToServer.writeObject("customer");
// App.outToServer.flush();
// App.outToServer.writeObject((Customer) p);
// } else if (!App.isEmp) {
// App.outToServer.writeObject("employee");
// App.outToServer.flush();
// App.outToServer.writeObject((Employee) p);
// }
// serverSays = (String) inFromServer.readObject();
// if (serverSays.equalsIgnoreCase("recieved")) {
// }

// }
// } catch (ClassNotFoundException | IOException e) {
// System.out.println(e.getMessage());
// }

// }

// public static void initiate() {
// System.out.println(App.socket.getLocalPort());
// new SignUp();
// }

// public static void main(String[] args) {
// String host = "127.0.0.1";
// int port = 8000;
// App.connect(host, port);
// App.initiate();
// }

// }


 Inventor.java ****************************************************************
  Inventor.java ****************************************************************

 package factory;

import javax.swing.*;

import common.Equipment;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class InventoryInterface implements ActionListener {
    private JFrame frame;
    private JTabbedPane tabbedPane = new JTabbedPane();
    private JPanel[] panel = new JPanel[4];
    private Color[] colors = { Color.blue, Color.green, Color.red, Color.magenta };
    private String[] categories = { "Sounding", "Lighting", "Powering", "Staging" };


    String[] sounding = {
        "crowd_control_barrires.jpeg", "mic.jpeg", "podium_and_lecturn.jpeg", 
        "portable_stage.jpeg", "stage_backdrops.jpeg", "stage_curtains.jpeg",
        "stage_platforms.jpeg", "stage_prop_decoration.jpeg", "stage_risers.jpeg", 
        "stage_skirting.jpeg", "stage_step_stairs.jpeg"
    };

    public InventoryInterface() {
        createFrame();

        for (int i = 0; i < categories.length; i++)
            createEquipmentTab(categories[i], i);

        frame.add(tabbedPane);
        constructInventory();
        frame.setVisible(true);
    }

    private JPanel constructPanel(String imagePath, String name, int quantity) {
        JPanel equimentPanel = new JPanel(new BorderLayout());
        JLabel equipmentName = new JLabel(name);
        JPanel imagePanel = new JPanel(new BorderLayout());
        imagePanel.setPreferredSize(new Dimension(200, 200));
        imagePanel.add(new JLabel(scaleImage(imagePath, 200, 200)));
        JLabel quantityLabel = new JLabel(quantity + "");
        equimentPanel.add(equipmentName, BorderLayout.NORTH);
        equimentPanel.add(imagePanel, BorderLayout.CENTER);
        equimentPanel.add(quantityLabel);
        return equimentPanel;
    }

    private void createFrame() {
        frame = new JFrame("Inventory");
        frame.setSize(1600, 1100);
        frame.setLayout(null);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }

    public void createEquipmentTab(String category, int i) {
        panel[i] = new JPanel(new GridLayout());
        panel[i].setBackground(colors[i]);
        tabbedPane.setBounds(0, 0, 1600, 1000);
        tabbedPane.add(category, panel[i]);
    }

    private ImageIcon scaleImage(String path, int width, int height) {
        ImageIcon icon = new ImageIcon(getClass().getResource(path));
        Image scaleImage = icon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
        return new ImageIcon(scaleImage);
    }

    private void constructInventory() {
        Equipment[] equipments = App.displayEquipments();
        for (Equipment equipment : equipments) {
            if (equipment.getCategory().equalsIgnoreCase("lighting")) {
                panel[1].add(constructPanel(
                        "", equipment.getEquipmentName(),
                        equipment.getQuantity()));
            }
            if (equipment.getCategory().equalsIgnoreCase("sound")) {
                panel[0].add(constructPanel(
                        "", equipment.getEquipmentName(),
                        equipment.getQuantity()));
            }
            if (equipment.getCategory().equalsIgnoreCase("staging")) {
                panel[3].add(constructPanel(
                        "", equipment.getEquipmentName(),
                        equipment.getQuantity()));
            }
            if (equipment.getCategory().equalsIgnoreCase("powering")) {
                panel[2].add(constructPanel(
                        "", equipment.getEquipmentName(),
                        equipment.getQuantity()));
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {

    }

    // public static void main(String[] args) {
    // App.connect("localhost", 8000);
    // new InventoryInterface();
    // }
}

 ****************************************************************
****************************************************************








    public static ArrayList<Rental> sortRentals(ArrayList<Rental> rentals) {
        System.out.println("List before sorting: " + rentals);
        ArrayList<Rental> sortedRentalList = new ArrayList<>();

        // loop through each rental in the list of rentals
        for (int i = 0; i < rentals.size(); i++) {
            Rental currentRental = rentals.get(i);
            int d1 = Date.dateToInt(currentRental.getDate());

            for (int j = i + 1; j < rentals.size(); j++) {
                int d2 = Date.dateToInt(rentals.get(j).getDate());

                if (d2 < d1) {
                    currentRental = rentals.get(j);
                    d1 = Date.dateToInt(currentRental.getDate());
                }
            }
            // Adds this newly found rental to the sorted list
            sortedRentalList.add(currentRental);
        }
        // Return the sorted list of rentals according to the a-z
        System.out.println("List After sorting: " + sortedRentalList);

        return sortedRentalList;
    }


******************************************************************************************************************
newly modified version of App
package interfaces;

/**
   * @author Jovaughn Rose
   * @see https://github.com/jovaughnR
   */

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.SwingUtilities;

import common.Equipment;
import common.Person;
import common.Rental;

public class App {
    private static Socket socket;
    private static ObjectInputStream inFromServer = null;
    private static ObjectOutputStream outToServer = null;
    public static boolean isEmp = false;
    public static HashMap<String, Equipment> map = new HashMap<>();
    final static int width = 1200, height = 1000;
    public static boolean sorted = false;

    // set the current user to temporary value for testing remove when finish
    public static int currentUser = 111111;
    // public static Date date;

    public static void connect(String host, int port) {
        try {
            App.socket = new Socket(host, port);
            configureStreams();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void configureStreams() throws IOException {
        App.outToServer = new ObjectOutputStream(App.socket.getOutputStream());
        App.outToServer.flush();
        App.inFromServer = new ObjectInputStream(App.socket.getInputStream());
    }

    public static String signUpMessage(String name, int id) {
        return String.format(
                "Congratulations %s! You've been successfully signed up.%n%nYour Identification Number: [ %d ]%n%nWhen logging in, use this number along with the password you used during signup.%n%nWelcome to our system! Thank you for joining.",
                name, id);
    }

    public static int signUpEntity(Person p) {
        App.write("signUp", true);
        App.write((App.isEmp) ? "employee" : "customer", true);
        return (Integer) App.write(p, true);
    }

    public static Boolean signIn(int id, String password) {
        App.write("signIn", true);
        App.write(id, true);
        return (Boolean) App.write(password, true);
    }

    public static List<Equipment> getEquipments() {
        try {
            App.outToServer.writeObject("equipments");
            @SuppressWarnings("unchecked")
            List<Equipment> equipments = (List<Equipment>) inFromServer.readObject();
            return equipments;

        } catch (IOException | ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    public static void loadEquipment() {
        List<Equipment> equipments = App.getEquipments();
        for (Equipment equipment : equipments)
            App.map.put(equipment.getEquipmentName(), equipment);
    }

    public static void initiate(String host, int port) {
        App.connect(host, port);
        System.out.println("App connected on local port: " + App.socket.getLocalPort());
        App.loadEquipment();
        SwingUtilities.invokeLater(Login::new);
    }

    public void sendMessage(String message) {
        try {
            App.outToServer.writeObject(message);
        } catch (IOException e) {
            System.out.println("Error sending message: " + e.getMessage());
        }
    }

    public static void sendType(String type) {
        try {
            App.outToServer.writeObject(type);
        } catch (IOException e) {
            System.out.println("Error sending type: " + e.getMessage());
        }
    }

    public static Equipment requestEquipment(int id) {
        App.write("requestEquipment", true);
        return (Equipment) App.write(id, true);
    }

    public static boolean isEquipmentAvailable(int id) {
        Equipment equipment = App.requestEquipment(id);
        return ("Available".equalsIgnoreCase(equipment.getAvailabilityStatus()));
    }

    public static boolean makeRentalRequest(Rental rental) {
        App.write("requestRental", true);
        int id = rental.getEquipmentId();
        if ((Boolean) App.write(id, true)) {
            App.write(rental, false);
            return true;
        } else
            App.write(false, false);
        return false;
    }

    public static ArrayList<Rental> getRentalRequests() {
        @SuppressWarnings("unchecked")
        ArrayList<Rental> rentals = (ArrayList<Rental>) App.write("getRentalRequest", true);
        if (App.sorted)
            return RentalRequest.sortRentals(rentals);
        return rentals;
    }

    public static Object getObject(int id, String query) {
        App.write(query, true);
        return App.write(id, true);
    }

    public static void removeRentalRequest(int equipId, int cusId) {
        App.write("removeRentalRequest", true);
        App.write(equipId, true);
        App.write(cusId, false);
    }

    /**
     * @param obj  represents the specified object to be written to the ouputstraem
     * @param auto should be true only if an object is expected from the input
     *             stream
     */

    private static Object write(Object obj, boolean auto) {
        try {
            App.outToServer.writeObject(obj);
            App.outToServer.flush();
            if (auto)
                return App.inFromServer.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error: " + e.getMessage());
        }
        return null;
    }

    public static void main(String[] args) {

        String host = "127.0.0.1";
        int port = 8000;
        App.initiate(host, port);
        // // App.connect(host, port);
        // System.out.println(App.getEquipments());

        // Equipment[] equip = App.displayEquipments();
        // for (Equipment e : equip)
        // System.out.println(e);
        // App.initiate();
    }
}



package interfaces;

/**
   * @author Jovaughn Rose
   * @see https://github.com/jovaughnR
   */

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.SwingUtilities;
import javax.swing.plaf.synth.SynthSeparatorUI;

// import common.Date;
import common.Equipment;
import common.Person;
import common.Rental;

public class App {
    private static Socket socket;
    private static ObjectInputStream inFromServer = null;
    private static ObjectOutputStream outToServer = null;
    public static boolean isEmp = false;
    public static HashMap<String, Equipment> map = new HashMap<>();
    final static int width = 1200, height = 1000;
    public static boolean sorted = false;

    // set the current user to temporary value for testing remove when finish
    public static int currentUser = 111111;
    // public static Date date;

    public static void connect(String host, int port) {
        try {
            App.socket = new Socket(host, port);
            configureStreams();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void configureStreams() throws IOException {
        App.outToServer = new ObjectOutputStream(App.socket.getOutputStream());
        App.outToServer.flush();
        App.inFromServer = new ObjectInputStream(App.socket.getInputStream());
    }

    public static String signUpMessage(String name, int id) {
        return String.format(
                "Congratulations %s! You've been successfully signed up.%n%nYour Identification Number: [ %d ]%n%nWhen logging in, use this number along with the password you used during signup.%n%nWelcome to our system! Thank you for joining.",
                name, id);
    }

    public static int signUpEntity(Person p) {
        App.write("signUp", true);
        App.write((App.isEmp) ? "employee" : "customer", false);
        return (Integer) App.write(p, true);
    }

    public static Boolean signIn(int id, String password) {
        App.write("signIn", true);
        App.write(id, true);
        return (Boolean) App.write(password, true);
    }

    public static List<Equipment> getEquipments() {
        try {
            App.outToServer.writeObject("equipments");
            System.out.println("Requesting equipments from server");
            @SuppressWarnings("unchecked")
            List<Equipment> equipments = (List<Equipment>) inFromServer.readObject();
            return equipments;

        } catch (IOException | ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    public static void loadEquipment() {
        List<Equipment> equipments = App.getEquipments();
        for (Equipment equipment : equipments)
            App.map.put(equipment.getEquipmentName(), equipment);
    }

    public static void initiate(String host, int port) {
        Thread loginThread = new Thread(() -> {
            SwingUtilities.invokeLater(Login::new);
        });

        // loginThread.start();

        Thread other = new Thread(() -> {
            String msg = "connected on local port: ";
            App.connect(host, port);
            System.out.println(msg + App.socket.getLocalPort());
            App.loadEquipment();
        });

        other.start();
    }

    public void sendMessage(String message) {
        try {
            App.outToServer.writeObject(message);
        } catch (IOException e) {
            System.out.println("Error sending message: " + e.getMessage());
        }
    }

    public static void sendType(String type) {
        try {
            App.outToServer.writeObject(type);
        } catch (IOException e) {
            System.out.println("Error sending type: " + e.getMessage());
        }
    }

    // public static Equipment requestEquipment(int id) {
    // try {
    // App.outToServer.writeObject("requestEquipment");
    // App.inFromServer.readObject();
    // App.outToServer.writeObject(id);
    // return (Equipment) inFromServer.readObject();
    // } catch (IOException | ClassNotFoundException e) {
    // System.out.println("Error requesting equipment: " + e.getMessage());
    // }
    // return null;
    // }

    public static boolean isEquipmentAvailable(int id) {
        Equipment equipment = (Equipment) App.getObject(id, "requestEquipment");
        return ("Available".equalsIgnoreCase(equipment.getAvailabilityStatus()));
    }

    public static boolean makeRentalRequest(Rental rental) {
        App.write("requestRental", true);
        int id = rental.getEquipmentId();
        if ((Boolean) App.write(id, true)) {
            App.write(rental, false);
            return true;
        } else
            App.write(false, false);
        return false;
    }

    public static ArrayList<Rental> getRentalRequests() {
        try {
            @SuppressWarnings("unchecked")
            ArrayList<Rental> rentals = (ArrayList<Rental>) inFromServer.readObject();
            System.out.println("Rental request recieved: " + rentals);
            if (App.sorted)
                return RentalRequest.sortRentals(rentals);
            return rentals;

        } catch (ClassNotFoundException | IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
        return null;
    }

    public static Object getObject(int id, String query) {
        App.write(query, true);
        return App.write(id, true);
    }

    public static void removeRentalRequest(int equipId, int cusId) {
        App.write("removeRentalRequest", true);
        App.write(equipId, true);
        App.write(cusId, false);
    }

    private static Object write(Object obj, boolean auto) {
        try {
            App.outToServer.writeObject(obj);
            App.outToServer.flush();
            if (auto)
                return App.inFromServer.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error: " + e.getMessage());
        }
        return null;
    }

    public static void main(String[] args) {

        String host = "127.0.0.1";
        int port = 8000;
        App.initiate(host, port);
        // // App.connect(host, port);
        // System.out.println(App.getEquipments());

        // Equipment[] equip = App.displayEquipments();
        // for (Equipment e : equip)
        // System.out.println(e);
        // App.initiate();
    }
}






    public static void getMessage() {
        








        Thread readThread = new Thread(() -> {
            try {
                Message message = (Message) App.inFromServer.readObject();
                System.out.println("MEssage from server: " + message);
                MessagingApp.appendMessage(message.getEmployeeId() + ": " + message.getMessage());
            } catch (IOException | ClassNotFoundException e) {
                System.out.println("Error reading the message: " + e.getMessage());
            }
        });

        Thread writeThread = new Thread(() -> {
            try {
                while (MessagingApp.isActive) {
                    System.out.println("Sending to server: isThereAmessageForMe");
                    App.outToServer.writeObject("isThereAmessageForMe");
                    App.outToServer.flush();

                    boolean status = (Boolean) App.inFromServer.readObject();
                    System.out.println("\n\nStatus on message from server: " + status);

                    if (status) {
                        // if there is a message start the read thread
                        readThread.start();
                        readThread.join();

                    } else if (!status)
                        System.out.println("No messages found");
                }

                // stop the readthread if it is alive
                if (readThread.isAlive()) {
                    System.out.println("Readthread is alive: " + readThread.isAlive());
                    readThread.interrupt();
                }
                App.outToServer.flush();

            } catch (IOException | ClassNotFoundException | InterruptedException e) {
                System.out.println("Error writing to server: " + e.getCause());
                e.printStackTrace();
            }
        });
        writeThread.start();
        try {
            writeThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }